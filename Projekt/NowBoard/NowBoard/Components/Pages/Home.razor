@page "/"
@using System.Linq.Expressions;
    @using System.Net.Http;
    @using System.Xml.Serialization;
    @using System.Net.Http.Headers;
    @using System.Text;
    @using httpdemo.OjpModel;
@inject HttpClient Http
@inject IJSRuntime JS

<style>
    main {
    background-color: #00157e;
    color: white;
    height: 100vh;
    padding: 20px;
    box-sizing: border-box;
    position: relative
    }

    .header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-top: 20px;
    margin-bottom: 40px;
    padding: 0;
    font-size: 60px;
    }

    .station-title {
    font-size: 1.5em;
    font-weight: bold;
    }

    .clock {
    width: 210px;
    height: 210px;
    border: none;
    }

    .table {
    margin-top: 100px;
    width: 100%;
    border-collapse: collapse;
    }

    .table th,
    .table td {
    border-bottom: 2px solid white;
    padding: 10px;
    text-align: left;
    color: white;
    font-size: 50px;
    }

    .table th {
    font-weight: normal;
    }

    .abfahrtzeit {
    font-weight: bold;
    }

    .hinweis {
    color: #ccc;
    }

    .loslaufen {
        font-size: 70px;
        width: fit-content;
        position: relative;
        bottom: 15px;
    }

    .clock {
        width: 420px;
        height: 420px;
        position: absolute;
        top: 20px;
        right: 10px;
        border: none;
    }
</style>

<main>
    <div class="header">

        <div>
            <div class="station-title">St. Gallen, Riethüsli</div>
        </div>

        <canvas id="clock" class="clock" height="400" width="400"></canvas>

    </div>

    @if (datalist.Count == 0)
    {
        <span>Keine Abfahrten gefunden.</span>
    }
    else if (GetLoslaufenCountdown() <= 0)
    {
        <p class="loslaufen">Loslaufen in @GetLoslaufenCountdown2() min</p>
    }
    else
    {
        <p class="loslaufen">Loslaufen in @GetLoslaufenCountdown() min</p>
    }

    <table class="table">
            <thead>
                <tr>
                    <th>Linie</th>
                    <th>Ziel</th>
                    <th>Abfahrt</th>
                    <th>Hinweis</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var item in datalist)
            {
                <tr>
                    <td>B @item.linie</td>
                    <td>St. Gallen, Bahnhof</td>
                    <td class="abfahrtzeit">@item.timetabledTime2</td>
                    <td class="hinweis" style="text-align: match-parent;">+ @item.hinweis</td>
                </tr>
            }
            </tbody>
        </table>
</main>

@code 
{
    // Nach dem ersten rendern der komponente
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Funktion aufrufen um uhr zu zeichnen
            await JS.InvokeVoidAsync("drawClock");
        }
    }

    private List<Datalist> datalist = new();

    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await displaydepartures();
        // Timer jede minute starten
        refreshTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await displaydepartures();
                StateHasChanged();
            });
        }, null, TimeSpan.FromMinutes(1), TimeSpan.FromMinutes(1));
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    private async Task displaydepartures()
    {
        using var client = new HttpClient();
        client.BaseAddress = new Uri("https://api.opentransportdata.swiss/ojp20");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "eyJvcmciOiI2NDA2NTFhNTIyZmEwNTAwMDEyOWJiZTEiLCJpZCI6ImMwZDY2ZGI2NmQ3NDQ4ZjM4ODMxMDg5MTM1MWNmY2UwIiwiaCI6Im11cm11cjEyOCJ9");

        var requestData = RequestCreate();
        var request = new StringContent(requestData, Encoding.UTF8, "application/xml");

        var response = await client.PostAsync("", request);
        var responseXML = await response.Content.ReadAsStringAsync();

        var ojpReader = new XmlSerializer(typeof(Ojp));
        var responseOjp = (Ojp?)ojpReader.Deserialize(new StringReader(responseXML));

        var haltestelle = responseOjp.OjpResponse.ServiceDelivery.OjpStopEventDelivery.StopEventResponseContext.Places.PlaceList[0].StopPlace.StopPlaceName.Text.Value ?? "Unbekannt";

        datalist.Clear();
        int count = 0;
        foreach (var stopEvent in responseOjp.OjpResponse.ServiceDelivery.OjpStopEventDelivery.StopEventResults)
        {
            var linie = stopEvent.StopEvent.Service.PublishedServiceName.Text.Value;

            // Filter nur Linie 5, Linie 180 ausschliessen, max. 5 Ergebnisse
            if (linie == "5")
            {
                var estimatedTime = stopEvent.StopEvent.ThisCall.CallAtStop.ServiceDeparture.EstimatedTime.AddHours(2);
                var timetabledTime = stopEvent.StopEvent.ThisCall.CallAtStop.ServiceDeparture.TimetabledTime.AddHours(2);
                var timetabledTime2 = timetabledTime.ToString("t");
                var hinweis = (estimatedTime - timetabledTime).ToString("t");

                datalist.Add(new Datalist
                {
                    haltestelle = haltestelle,
                    estimatedTime = estimatedTime.ToString("t"),
                    timetabledTime = timetabledTime.ToString("t"),
                    timetabledTime2 = timetabledTime2,
                    linie = linie,
                    hinweis = hinweis
                });

                count++;
                if (count >= 5)
                    break;
            }
        }
    }

    private string GetLoslaufenZeit()
    {
        if (datalist.Count == 0)
        {
            return "-";
        }

        var first = datalist[0];
        if (DateTime.TryParse(first.timetabledTime2, out var abfahrt))
        {
            var loslaufen = abfahrt.AddMinutes(-8);
            return loslaufen.ToString("HH:mm");
        }
        return "-";
    }

    private int GetLoslaufenCountdown()
    {
        if (datalist.Count == 0)
        {
            return 0;
        }

        var first = datalist[0];
        if (DateTime.TryParse(first.timetabledTime2, out var abfahrt))
        {
            var loslaufen = abfahrt.AddMinutes(-8);
            var diff = (loslaufen - DateTime.Now).TotalMinutes;
            return Math.Max(0, (int)Math.Ceiling(diff));
        }
        return 0;
    }

    private int GetLoslaufenCountdown2()
    {
        if (datalist.Count == 0)
        {
            return 0;
        }

        var sec = datalist[1];
        if (DateTime.TryParse(sec.timetabledTime2, out var abfahrt))
        {
            var loslaufen = abfahrt.AddMinutes(-8);
            var diff = (loslaufen - DateTime.Now).TotalMinutes;
            return Math.Max(0, (int)Math.Ceiling(diff));
        }
        return 0;
    }


    public class Datalist
    {
        public string estimatedTime { get; set; }
        public string timetabledTime { get; set; }
        public string timetabledTime2 { get; set; }
        public string hinweis { get; set; }
        public string linie { get; set; }
        public string haltestelle { get; set; }
    }

    private static string RequestCreate()
        {
            return @"<?xml version=""1.0"" encoding=""UTF-8""?>
<OJP xmlns=""http://www.vdv.de/ojp"" xmlns:siri=""http://www.siri.org.uk/siri"" version=""2.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://www.vdv.de/ojp ../../../../OJP4/OJP.xsd"">
  <OJPRequest>
    <siri:ServiceRequest>
      <siri:RequestTimestamp>2024-06-01T11:24:34.598Z</siri:RequestTimestamp>
      <siri:RequestorRef>MENTZRegTest</siri:RequestorRef>
      <OJPStopEventRequest>
        <siri:RequestTimestamp>2024-06-01T11:24:34.598Z</siri:RequestTimestamp>
        <siri:MessageIdentifier>SER</siri:MessageIdentifier>
        <Location>
          <PlaceRef>
            <StopPlaceRef>8574258</StopPlaceRef>
            <Name>
              <Text>St. Gallen, Riethuesli</Text>
            </Name>
          </PlaceRef>
        </Location>
        <Params>
          <OperatorFilter>
            <Exclude>false</Exclude>
            <OperatorRef>11</OperatorRef>
          </OperatorFilter>
          <NumberOfResults>10</NumberOfResults>
          <StopEventType>departure</StopEventType>
          <IncludePreviousCalls>false</IncludePreviousCalls>
          <IncludeOnwardCalls>false</IncludeOnwardCalls>
          <UseRealtimeData>full</UseRealtimeData>
        </Params>
      </OJPStopEventRequest>

     <siri:RequestTimestamp>2024-06-01T11:24:34.598Z</siri:RequestTimestamp>
      <siri:RequestorRef>MENTZRegTest</siri:RequestorRef>
      <OJPStopEventRequest>
        <siri:RequestTimestamp>2024-06-01T11:24:34.598Z</siri:RequestTimestamp>
        <siri:MessageIdentifier>SER</siri:MessageIdentifier>
        <Location>
          <PlaceRef>
            <StopPlaceRef>8506371</StopPlaceRef>
            <Name>
              <Text>St. Gallen Riethuesli</Text>
            </Name>
          </PlaceRef>
        </Location>
        <Params>
          <OperatorFilter>
            <Exclude>false</Exclude>
            <OperatorRef>11</OperatorRef>
          </OperatorFilter>
          <NumberOfResults>10</NumberOfResults>
          <StopEventType>departure</StopEventType>
          <IncludePreviousCalls>false</IncludePreviousCalls>
          <IncludeOnwardCalls>false</IncludeOnwardCalls>
          <UseRealtimeData>full</UseRealtimeData>
        </Params>
      </OJPStopEventRequest>
    </siri:ServiceRequest>
  </OJPRequest>
</OJP>";
        }
}